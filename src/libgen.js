
//Questa funzione serve a generare dinamicamente il codice del menu che compare al passaggio del mouse sopra una iApi
function getActions(iapiclass, iapiid){

    codeactions="";
    codeactions = codeactions.concat('<a class="getAll" id=' + iapiid + ' draggable="true" ondragstart="drag(event,document.URL)" href="?iapisource="+window.location.href+"&iapiid="+iapiid+"" style="color:white">Use data</a> <br/>');
    var classes=iapiclass.split(" ");
    for(i=0;i<classes.length;i++){
        if(classes[i].slice(0,4)==("rss:")){
            codeactions=codeactions.concat('<a href="#" style="color:white">getRss</a> \n');
        }
    }
    $("div[class~=iapiactions]").html(codeactions);
}

//Bidimensional target (Div,Table .. ) 
function generate( idTemplate) {



    req(function (idPage) {
    var data = JSON.parse(localStorage.getItem(idPage));

    var data = data[idTemplate];


       // console.log("sono in generate :"+data);
    
    template = $('#' + idTemplate);  // select the template

    var arr ={};
    var arrAttr = template.attr("class").split(" ");

    for (var i = 0; i < arrAttr.length; i++) {

        if (arrAttr[i].substr(0, 5) === "hide:") {
            var attribute = arrAttr[i].split(":");
            for (var j = 1; j < attribute.length; j++) {

                arr[attribute[j]]=attribute[j];
            }
        }
        if(arrAttr[i].slice(0, 11) === ("sourcetype:")){

           var sourceType=arrAttr[i].substr(11);

        }
     //console.log(arrAttr[i]);
    }


        if(sourceType === "iapi"){
    var txt = "";

    $.each(data, function (key, value) {

        var subtemplate = template.find("[class*='dataitem:']");  //get the dataitem

        // checks whether the template is auto implemented or given by the developer  "Presence of iapitemplate "
            var SplitDataAttribute = subtemplate.attr("class").split(" ");
            var iapiTemplatePresence;

            for (i = 0; i < SplitDataAttribute.length; i++) {
                if (SplitDataAttribute[i].slice(0, 12) == ("iapitemplate")) {
                    iapiTemplatePresence = SplitDataAttribute[i].substr(0,12);
                }


            }


    //rendering based on developer template (prefilled template)
           // if(iapiTemplatePresence){

                $.each(value, function (key, value) {

                    //   subtemplate.prop('id',key);    //set an Id for the current..

                    var  tmpChild=subtemplate.children();


                    for(var j=0 ;j<$(tmpChild).length;j++ ){
                        //console.log( $(tmpChild).eq(j));
                        $(tmpChild).eq(j).html(function(){


                            // $.each(value,function(key,values){
                            for(var key in value){
                                //console.log(key+"  "+$(tmpChild).eq(j).attr("class").substr(14));

                                if($(tmpChild).eq(j).attr("class").substr(14) === key){
                                   // console.log("confronto fra "+arr[key]+" e"+key);
                                    if(arr[key] !== key)
                                    {
                                       // console.log("stampo :" + key);
                                        return value[key] ;
                                    }
                                    else {
                                       // console.log("non stampo :" + value[key]);
                                        return null ;
                                    }

                                }

                            }

                        });
                    }

                    txt=txt.concat($(subtemplate)[0].outerHTML);
                });
         //   }
/*
            //autogenerated template (injected from the template file or default one )
            else if(!iapiTemplatePresence || typeof(Storage)!=="undefined"){
                $.each(value, function (key, value) {


                    var tmpChild = subtemplate.children();
                    console.log($(tmpChild));

                    var i = 0;  // counter dipends on the object element (dataattribute of each dataitem)
                    var txt2="";
                    for (var key in value) {
                        console.log("tessssst: "+key + "vs :"+arr[key])

                        if(key !==arr[key] ){
                        var td= $(tmpChild).clone();
                        td.html(value[key]);

                        txt2=txt2.concat($(td)[0].outerHTML);

                    }
                        i++;
                    }
                    $(subtemplate).html(txt2);

                    txt = txt.concat($(subtemplate)[0].outerHTML);
                });
                localStorage.setItem("tem",$(template));
            }
        */
        });
    }
        else if(sourceType === "json"){


            var txt = "";

            $.each(data, function (key, value) {

                var subtemplate = template.find("[class*='dataitem:']");  //get the dataitem

                // checks whether the template is auto implemented or given by the developer  "Presence of iapitemplate "
                var SplitDataAttribute = subtemplate.attr("class").split(" ");
                var iapiTemplatePresence;

                for (i = 0; i < SplitDataAttribute.length; i++) {
                    if (SplitDataAttribute[i].slice(0, 12) == ("iapitemplate")) {
                        iapiTemplatePresence = SplitDataAttribute[i].substr(0,12);
                    }


                }




                $.each(value, function (key, value) {

                    var  tmpChild=subtemplate.children();



                    for(var j=0 ;j<$(tmpChild).length;j++ ){
                        var arrAtt = $(tmpChild).eq(j).attr("class").split(" ");

                        var array;
                        for (var i = 0; i < arrAtt.length; i++) {

                            if (arrAtt[i].substr(0, 14) === "dataattribute:") {
                                var attribute = arrAtt[i].split(":");
                                array = attribute[2];
                                //console.log("aaaaaaaaaaaaaaaaaaa :" + array);
                                //console.log($(tmpChild).eq(j));
                                $(tmpChild).eq(j).html(function(){

                                    for(var key in value){

                                        //  console.log("aaaaaaaaaaaaaaaaaaa :"+arr);
                                        if (array === key) {

                                              if(arr[key] !== key)
                                             {

                                             return value[key] ;
                                             }
                                             else {

                                             return null ;
                                             }
                                        }



                                    }
                                });

                            }
                        }


                    }
                   txt=txt.concat($(subtemplate)[0].outerHTML);
                });


                });


    }


        template.find('[class*=data]').remove();
        $(template).append(txt);
    });
}

function middlewareAction(msg,id, callback) {
    var messageReturn = "done";
    console.log("LIBGEN:message:" + msg + " id:" + id);

    generate(id);

    callback(messageReturn);
}

function req(call) {
    chrome.extension.sendMessage({ "type": "requestPageId" }, function (data) {
      //  console.log("sffffffffffffffffff"+data);
        call(data);

    });
}