
//Questa funzione serve a generare dinamicamente il codice del menu che compare al passaggio del mouse sopra una iApi
function getActions(iapiclass, iapiid){

    codeactions="";
    codeactions = codeactions.concat('<a class="getAll" id=' + iapiid + ' draggable="true" ondragstart="drag(event,document.URL)" href="?iapisource="+window.location.href+"&iapiid="+iapiid+"" style="color:white">Use data</a> <br/>');
    var classes=iapiclass.split(" ");
    for(i=0;i<classes.length;i++){
        if(classes[i].slice(0,4)==("rss:")){
            codeactions=codeactions.concat('<a href="#" style="color:white">getRss</a> \n');
        }
    }
    $("div[class~=iapiactions]").html(codeactions);
}

//Bidimensional target (Div,Table .. ) 
function generate(data, idTemplate) {


    template = $('#' + idTemplate);  // select the template




    var txt = "";

    $.each(data, function (key, value) {

        var subtemplate = template.find('[class*=data]');  //get the dataitem

        // checks whether the template is auto implemented or given by the developer  "Presence of iapitemplate "
        var SplitDataAttribute = subtemplate.attr("class").split(" ");
        var iapiTemplatePresence;
        for (i = 0; i < SplitDataAttribute.length; i++) {
            if (SplitDataAttribute[i].slice(0, 12) == ("iapitemplate")) {
                iapiTemplatePresence = SplitDataAttribute[i].substr(0,12);
            }

        }


//rendering based on developer template (prefilled template)
        if(iapiTemplatePresence){
            $.each(value, function (key, value) {

                //   subtemplate.prop('id',key);    //set an Id for the current..

                var  tmpChild=subtemplate.children();


                for(var j=0 ;j<3;j++ ){
                    console.log( $(tmpChild).eq(j));
                    $(tmpChild).eq(j).html(function(){


                        // $.each(value,function(key,values){
                        for(var key in value){
                            //console.log(key+"  "+$(tmpChild).eq(j).attr("class").substr(14));
                            if($(tmpChild).eq(j).attr("class").substr(14) === key){

                                return value[key] ;

                            }
                        }

                    });
                }

                txt=txt.concat($(subtemplate)[0].outerHTML);
            });
        }

        //autogenerated template (injected from the template file or default one )
        else if(!iapiTemplatePresence || typeof(Storage)!=="undefined"){
            $.each(value, function (key, value) {

                console.log("heyyy");
                var tmpChild = subtemplate.children();


                var i = 0;  // counter dipends on the object element (dataattribute of each dataitem)
                var txt2="";
                for (var key in value) {
                    var td= $(tmpChild).clone();
                    td.html(value[key]);
                    txt2=txt2.concat($(td)[0].outerHTML);
                    i++;
                }


                $(subtemplate).html(txt2);

                txt = txt.concat($(subtemplate)[0].outerHTML);
            });
            localStorage.setItem("tem",$(template));
        }
    });
    template.find('[class*=data]').remove();
    $(template).append(txt);

}

function middlewareAction(msg,id, callback) {
    var messageReturn = "done";
    console.log("LIBGEN:message:" + msg + " id:" + id);

    callback(messageReturn);
}